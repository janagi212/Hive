1. Get rank of each category by revenue withing each department generated from all transaction.
   Display the result by department_name and rank in ascending order
  
Solution
-------------
select dname,cid,revenue,rank() over(partition by dname order by revenue desc) rnk from(
select d.department_name dname,c.category_id cid ,sum(oi.order_item_subtotal) revenue
from order_item oi join products p on oi.order_item_product_id=p.product_id
join categories c on p.product_category_id=c.category_id
join departments d on c.category_department_id = d.department_id
group by d.department_name,c.category_id
order by dname ) t  order by dname,rnk  limit 10;
  
 2. Get percentage of each category by revenue within each department.
    Display the result by department_name and percentage in descending order
    
 Solution
 --------
 select dname,cid,revenue,round((revenue/sum(revenue) over(partition by dname order by revenue))*100,2) perct from
(select d.department_name dname,c.category_id cid ,sum(oi.order_item_subtotal) revenue
from order_item oi join products p on oi.order_item_product_id=p.product_id
join categories c on p.product_category_id=c.category_id
join departments d on c.category_department_id = d.department_id
group by d.department_name,c.category_id
order by dname) t

3.Get top 10 stocks by volume for each day.

solution
--------

select stockticker,tradedate,vloume,rnk_vloume from
(select stockticker,tradedate,vloume,rank() over (partition by tradedate order by stockticker) rnk_vloume from
(select stockticker,tradedate,sum(vloume) from nyse_stock group by vloume order by vloume desc)
t) b where rnk_vloume<=10 order by tradedate,stockticker,vloume desc limit 10;


4. Get the total revenue for each day  ordered by date

solution
-------

select o.order_id,o.order_date,sum(oi.order_item_subtotal) total
from orders o join order_item oi on o.order_id=oi.order_item_order_id
group by o.order_id,o.order_date
order by o.order_date, total  limit 10;

5. Get monthly revenue of each department

solution
--------
select substr(o.order_date,0,7),d.department_id,round(sum(oi.order_item_subtotal),2)
from orders o join order_item oi on o.order_id=oi.order_item_order_id
join products p on oi.order_item_product_id=p.product_id
join categories c on p.product_category_id=c.category_id
join departments d on d.department_id=c.category_department_id
group by substr(o.order_date,0,7),d.department_id limit 20

6. Get monthly revenue of each department for the year 2013

solution
--------
select substr(o.order_date,0,7),d.department_id,d.department_name,round(sum(oi.order_item_subtotal),3)
from orders o join order_item oi on o.order_id=oi.order_item_order_id
join products p on oi.order_item_product_id=p.product_id
join categories c on p.product_category_id=c.category_id
join departments d on d.department_id=c.category_department_id
where substr(o.order_date,0,4)='2013'
group by substr(o.order_date,0,7),d.department_id,d.department_name limit 20

7. Top 10 revenue generating customers
solution
-------
select c.customer_id cid,sum(oi.order_item_subtotal) revenue
from orders o join order_item oi on o.order_id=oi.order_item_order_id
join customers c on c.customer_id=o.order_customer_id
group by c.customer_id
order by revenue desc limit 10;

8. Tope 10 revenue generating products
solution
--------

select p.product_id  pid,sum(oi.order_item_subtotal) revenue
from orders o join order_item oi on o.order_id=oi.order_item_order_id
join products p on p.product_id=oi.order_item_product_id
group by p.product_id
order by revenue desc limit 10;

9. Top 5 revenue generating departments
solution
---------

select c.category_id cid,d.department_id did,sum(oi.order_item_subtotal) revenue
from orders o join order_item oi on o.order_id=oi.order_item_order_id
join products p on p.product_id=oi.order_item_product_id
join categories c on c.category_id=p.product_category_id
join departments d on d.department_id=c.category_department_id
group by c.category_id,d.department_id

10. Top 5 revenue generating cities

11. Most selling products for every month in database between ( july 2013 and july 2014)
